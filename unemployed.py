# -*- coding: utf-8 -*-
"""notebook80471d5e69

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/notebook80471d5e69-1fcc4c10-9994-4ed1-b725-494953744a41.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20240615/auto/storage/goog4_request%26X-Goog-Date%3D20240615T062702Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D535874e3ecd1b5537a986c08bf12f139e855a006489be21b91d69c03805eb2033b7605e6e076eee0fce694a6472edc9ef2fe1b588ac32990839e978a54346d38d411c8abb046f233e6479e21643ac88418e3691513a70e5eb699f04dd3462f47b7b20c36f51086f52acdb8c712c12212933848ed5d7d258e1a3154d676a625f44da03422bd42c63e218956bc34dd76cb5651de01db07ceb6203f415159e01a81b54c0b420506f1fbda2f8be537d5c0eae057d01c272df24912a227362cf1c9686331f862122ec0877a91f951bc72a8075d3574186f8daced6133494416511b405b1e0bc9be566af443e683f3d0ae1a0a6552d58d4a98de0efe202654312b4879
"""

import os
import sys
from tempfile import NamedTemporaryFile
from urllib.request import urlopen
from urllib.parse import unquote, urlparse
from urllib.error import HTTPError
from zipfile import ZipFile
import tarfile
import shutil

CHUNK_SIZE = 40960
DATA_SOURCE_MAPPING = 'unemployment-in-india:https%3A%2F%2Fstorage.googleapis.com%2Fkaggle-data-sets%2F752131%2F1621146%2Fbundle%2Farchive.zip%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com%252F20240615%252Fauto%252Fstorage%252Fgoog4_request%26X-Goog-Date%3D20240615T062702Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D2f52d44a4f12178a17ba0b863a6604506fe115b48ec10a83dd82e995bf74f00c64302241d575e9dd5d1600651dbfa5ce878451d496bd4768ef066f539c9f3881a888f3ecf5f586b313f827d7497c3a21cbe7ddf1ad7ded4ff9e87e8898466c6ad785dfbc6641af48c49d78174988437c03a0cfe1d492c31f298b739356202670e88f6daabb6adf3dbc4a81e0525a3e99d5e2ee21440418e1791e6fce763e6a6ae0642e7a47e5998297a8c6a6aaf8b653aa78cfb98f83d94ccd8d507b55175bcc9e9d3b7de4fc5b981c21bf5df45bd38782b1f6b370a3558d3f16c4cd94289f03b0f804bbdeaba4abf27af908d551f8cfc96345d8252001e0202fb40c6834a0e8'

KAGGLE_INPUT_PATH='/kaggle/input'
KAGGLE_WORKING_PATH='/kaggle/working'
KAGGLE_SYMLINK='kaggle'

!umount /kaggle/input/ 2> /dev/null
shutil.rmtree('/kaggle/input', ignore_errors=True)
os.makedirs(KAGGLE_INPUT_PATH, 0o777, exist_ok=True)
os.makedirs(KAGGLE_WORKING_PATH, 0o777, exist_ok=True)

try:
  os.symlink(KAGGLE_INPUT_PATH, os.path.join("..", 'input'), target_is_directory=True)
except FileExistsError:
  pass
try:
  os.symlink(KAGGLE_WORKING_PATH, os.path.join("..", 'working'), target_is_directory=True)
except FileExistsError:
  pass

for data_source_mapping in DATA_SOURCE_MAPPING.split(','):
    directory, download_url_encoded = data_source_mapping.split(':')
    download_url = unquote(download_url_encoded)
    filename = urlparse(download_url).path
    destination_path = os.path.join(KAGGLE_INPUT_PATH, directory)
    try:
        with urlopen(download_url) as fileres, NamedTemporaryFile() as tfile:
            total_length = fileres.headers['content-length']
            print(f'Downloading {directory}, {total_length} bytes compressed')
            dl = 0
            data = fileres.read(CHUNK_SIZE)
            while len(data) > 0:
                dl += len(data)
                tfile.write(data)
                done = int(50 * dl / int(total_length))
                sys.stdout.write(f"\r[{'=' * done}{' ' * (50-done)}] {dl} bytes downloaded")
                sys.stdout.flush()
                data = fileres.read(CHUNK_SIZE)
            if filename.endswith('.zip'):
              with ZipFile(tfile) as zfile:
                zfile.extractall(destination_path)
            else:
              with tarfile.open(tfile.name) as tarfile:
                tarfile.extractall(destination_path)
            print(f'\nDownloaded and uncompressed: {directory}')
    except HTTPError as e:
        print(f'Failed to load (likely expired) {download_url} to path {destination_path}')
        continue
    except OSError as e:
        print(f'Failed to load {download_url} to path {destination_path}')
        continue

print('Data source import complete.')

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import datetime as dt
import calendar

import warnings
warnings.filterwarnings("ignore")
# %matplotlib inline

df=pd.read_csv("/kaggle/input/unemployment-in-india/Unemployment_Rate_upto_11_2020.csv")
df

df.head()

df.info()

df.isnull().sum()

df.shape

df.columns

df.columns = ['States', 'Date', 'Frequency', 'Estimated Unemployment Rate', 'Estimated Employed',
              'Estimated Labour Participation Rate', 'Region', 'longitude', 'latitude']

# Extracting month from 'Date' and creating a 'Month' column
df['Date'] = pd.to_datetime(df['Date'], dayfirst=True)

# Converting 'Frequency' and 'Region' columns to categorical data type
df['Frequency'] = df['Frequency'].astype('category')
df['Region'] = df['Region'].astype('category')

df['Month'] = df['Date'].dt.month

df['Month_int'] = df['Month'].apply(lambda x: int(x))

df['Month_name'] = df['Month_int'].apply(lambda x: calendar.month_abbr[x])

df.drop(columns='Month', inplace=True)

df.head()

df_stats = df[['Estimated Unemployment Rate', 'Estimated Employed', 'Estimated Labour Participation Rate']]
round(df_stats.describe().T, 2)

region_stats = df.groupby(['Region'])[['Estimated Unemployment Rate', 'Estimated Employed',
                                       'Estimated Labour Participation Rate']].mean().reset_index()
round(region_stats, 2)

heat_maps = df[['Estimated Unemployment Rate', 'Estimated Employed', 'Estimated Labour Participation Rate', 'longitude', 'latitude', 'Month_int']]
heat_maps = heat_maps.corr()
plt.figure(figsize=(9, 5))
sns.set_context('notebook', font_scale=1)
sns.heatmap(heat_maps, annot=True, cmap='summer')

"""Unemployment Rate Analysis: Data Visualization"""

#The unemployment rate according to different regions of India:
plt.figure(figsize=(10, 8))
plt.title("Indian Unemployment")
sns.histplot(x="Estimated Unemployment Rate", hue="Region", data=df)
plt.show()

import plotly.express as px
from plotly.offline import init_notebook_mode, iplot
init_notebook_mode(connected=True)

"""Box plot of Unemployment Rate by State"""

fig = px.box(df, x='States', y='Estimated Unemployment Rate', color='States', title='Unemployment Rate Per States', template='plotly')
fig.update_layout(xaxis={'categoryorder': 'total descending'})
fig.show()

"""Scatter matrix"""

fig = px.scatter_matrix(df, template='plotly',
                        dimensions=['Estimated Unemployment Rate', 'Estimated Employed', 'Estimated Labour Participation Rate'],
                        color='Region')
fig.show()

"""Bar plot of average Unemployment Rate by State

"""

plot_ump = df[['Estimated Unemployment Rate', 'States']]
df_unemp = plot_ump.groupby('States').mean().reset_index()
df_unemp = df_unemp.sort_values('Estimated Unemployment Rate')
fig = px.bar(df_unemp, x='States', y='Estimated Unemployment Rate', color='States',
             title='Average Unemployment Rate in each state', template='plotly')
fig.show()

"""Animated bar plot of Unemployment rate across region from Jan.2020 to Oct.2020"""

fig = px.bar(df, x='Region', y='Estimated Unemployment Rate', animation_frame='Month_name', color='States',
             title='Unemployment rate across region from Jan.2020 to Oct.2020', height=700, template='plotly')
fig.update_layout(xaxis={'categoryorder': 'total descending'})
fig.layout.updatemenus[0].buttons[0].args[1]["frame"]["duration"] = 2000
fig.show()

"""Sunburst chart showing unemployment rate in each region and state"""

unemplo_df = df[['States', 'Region', 'Estimated Unemployment Rate', 'Estimated Employed', 'Estimated Labour Participation Rate']]
unemplo = unemplo_df.groupby(['Region', 'States'])['Estimated Unemployment Rate'].mean().reset_index()
fig = px.sunburst(unemplo, path=['Region', 'States'], values='Estimated Unemployment Rate',
                  color_continuous_scale='Plasma', title='Unemployment rate in each region and state',
                  height=650, template='ggplot2')
fig.show()

"""Impact of Lockdown on States Estimated Employed"""

fig = px.scatter_geo(df,'longitude', 'latitude', color="Region",
                     hover_name="States", size="Estimated Unemployment Rate",
                     animation_frame="Month_name",scope='asia',template='seaborn',title='Impack of lockdown on Employement across regions')

fig.layout.updatemenus[0].buttons[0].args[1]["frame"]["duration"] = 3000

fig.update_geos(lataxis_range=[5,35], lonaxis_range=[65, 100],oceancolor="#3399FF",
    showocean=True)

fig.show()

"""data representation before and after the lockdown"""

after_lockdown = df[(df['Month_int'] >= 4) & (df['Month_int'] <=6)]
before_lockdown = df[(df['Month_int'] >= 1) & (df['Month_int'] <=4)]

af_lockdown=after_lockdown.groupby('States')['Estimated Unemployment Rate'].mean().reset_index()
lockdown= before_lockdown.groupby('States')['Estimated Unemployment Rate'].mean().reset_index()
lockdown['Unemployment Rate before lockdown'] = af_lockdown['Estimated Unemployment Rate']

lockdown.columns=['States','Unemployment Rate Before Lockdown','Unemployment Rate After Lockdown']
lockdown.head()

"""percentage change in unemployment rate"""

lockdown['rate change in unemployment'] = round(lockdown['Unemployment Rate After Lockdown'] -lockdown['Unemployment Rate Before Lockdown']/lockdown['Unemployment Rate Before Lockdown'],2)
plot_per = lockdown.sort_values('rate change in unemployment')

fig = px.bar(plot_per, x='States',y='rate change in unemployment',color='rate change in unemployment',
            title='percentage change in Unemployment in each state after lockdown',template='ggplot2')
fig.show()